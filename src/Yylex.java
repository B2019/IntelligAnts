

/* The following code was generated by JFlex 1.4.3 on 14/03/14 18:36 */

/* this is the scanner example from the JLex website 
   (with small modifications to make it more readable) */

/**This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/03/13 18:36 from the specification file
 * <tt>N:/Work/SoftwareEngineering/lexflex.flex</tt>*/

class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  3,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  4,  0,  0,  0,  0, 
     0,  9,  1, 15, 16,  6, 20, 23, 22, 14,  1, 11, 21,  8,  7, 17, 
    13,  1, 10,  5, 18, 12, 19, 24,  1,  1,  1,  0,  0,  0,  0,  1, 
     0,  9,  1, 15, 16,  6, 20, 23, 22, 14,  1, 11, 21,  8,  7, 17, 
    13,  1, 10,  5, 18, 12, 19, 24,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\14\1\34\0\1\4\6\0"+
    "\1\5\1\6\2\0\1\7\2\0\1\10\1\11\4\0"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\0\1\20"+
    "\1\21\7\0\1\22\1\0\1\23\1\24\1\25\7\0"+
    "\1\26\11\0\1\27\1\0\1\30\1\31\3\0\1\32"+
    "\2\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\31\0\62\0\31\0\113\0\144\0\175"+
    "\0\226\0\257\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145"+
    "\0\u015e\0\u0177\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d"+
    "\0\u0226\0\u023f\0\u0258\0\u0271\0\u028a\0\u02a3\0\u02bc\0\u02d5"+
    "\0\u02ee\0\u0307\0\u0320\0\u0339\0\u0352\0\u036b\0\u0384\0\u039d"+
    "\0\u03b6\0\u03cf\0\u03e8\0\u0401\0\u041a\0\u0433\0\u044c\0\u0465"+
    "\0\u047e\0\u0497\0\u04b0\0\u04c9\0\u04e2\0\31\0\u04fb\0\u0514"+
    "\0\31\0\u052d\0\u0546\0\31\0\31\0\u055f\0\u0578\0\u0591"+
    "\0\u05aa\0\31\0\31\0\u05c3\0\31\0\31\0\31\0\u05dc"+
    "\0\31\0\u05f5\0\u060e\0\u0627\0\u0640\0\u0659\0\u0672\0\u068b"+
    "\0\u06a4\0\31\0\u06bd\0\31\0\31\0\u06d6\0\u06ef\0\u0708"+
    "\0\u0721\0\u073a\0\u0753\0\u076c\0\u0785\0\31\0\u079e\0\u07b7"+
    "\0\u07d0\0\u07e9\0\u0802\0\u081b\0\u0834\0\u084d\0\u0866\0\31"+
    "\0\u087f\0\31\0\31\0\u0898\0\u08b1\0\u08ca\0\31\0\u08e3"+
    "\0\u08fc\0\31";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\1\6\1\7\2\3\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\2\3\1\15\1\3\1\16"+
    "\1\3\1\17\1\20\1\21\2\3\33\0\1\4\31\0"+
    "\1\22\33\0\1\23\33\0\1\24\7\0\1\25\35\0"+
    "\1\26\20\0\1\27\2\0\1\30\16\0\1\31\37\0"+
    "\1\32\24\0\1\33\32\0\1\34\26\0\1\35\6\0"+
    "\1\36\3\0\1\37\11\0\1\40\30\0\1\41\12\0"+
    "\1\42\10\0\2\22\1\5\1\0\24\22\7\0\1\43"+
    "\33\0\1\44\41\0\1\45\13\0\1\46\51\0\1\47"+
    "\20\0\1\50\21\0\1\51\37\0\1\52\32\0\1\53"+
    "\21\0\1\54\34\0\1\55\20\0\1\56\12\0\1\57"+
    "\25\0\1\60\36\0\1\61\16\0\1\62\26\0\1\63"+
    "\25\0\1\64\36\0\1\65\23\0\1\66\33\0\1\67"+
    "\45\0\1\70\15\0\1\71\26\0\1\72\32\0\1\73"+
    "\32\0\1\74\22\0\1\75\27\0\1\76\32\0\1\77"+
    "\15\0\1\100\1\0\1\101\20\0\1\102\25\0\1\103"+
    "\35\0\1\104\14\0\1\105\30\0\1\106\30\0\1\107"+
    "\30\0\1\110\42\0\1\111\32\0\1\112\20\0\1\113"+
    "\32\0\1\114\23\0\1\115\32\0\1\116\40\0\1\117"+
    "\25\0\1\120\23\0\1\121\31\0\1\122\27\0\1\123"+
    "\32\0\1\124\32\0\1\125\33\0\1\126\22\0\1\127"+
    "\26\0\1\130\42\0\1\131\34\0\1\132\30\0\1\133"+
    "\32\0\1\134\13\0\1\135\23\0\1\136\50\0\1\137"+
    "\10\0\1\140\30\0\1\141\40\0\1\142\20\0\1\143"+
    "\46\0\1\144\15\0\1\145\30\0\1\146\41\0\1\147"+
    "\20\0\1\150\37\0\1\151\27\0\1\152\30\0\1\153"+
    "\36\0\1\154\23\0\1\155\33\0\1\156\24\0\1\157"+
    "\31\0\1\160\30\0\1\161\27\0\1\162\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2325];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\1\1\1\11\14\1\34\0\1\1"+
    "\6\0\1\1\1\11\2\0\1\11\2\0\2\11\4\0"+
    "\2\11\1\1\3\11\1\0\1\11\1\1\7\0\1\11"+
    "\1\0\2\11\1\1\7\0\1\11\11\0\1\11\1\0"+
    "\2\11\3\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenParent yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return (new T_instruction(yytext(), 5));
          }
        case 28: break;
        case 4: 
          { return (new T_condition(yytext(), 2));
          }
        case 29: break;
        case 14: 
          { return (new T_condition(yytext(), 9));
          }
        case 30: break;
        case 3: 
          { return null;
          }
        case 31: break;
        case 9: 
          { return (new T_instruction(yytext(), 6));
          }
        case 32: break;
        case 27: 
          { return (new T_condition(yytext(), 3));
          }
        case 33: break;
        case 13: 
          { return (new T_direction(yytext(), 1));
          }
        case 34: break;
        case 6: 
          { return (new T_instruction(yytext(), 7));
          }
        case 35: break;
        case 26: 
          { return (new T_condition(yytext(), 4));
          }
        case 36: break;
        case 12: 
          { return (new T_turn(yytext(), 1));
          }
        case 37: break;
        case 15: 
          { return (new T_instruction(yytext(), 1));
          }
        case 38: break;
        case 16: 
          { return (new T_direction(yytext(), 2));
          }
        case 39: break;
        case 11: 
          { return (new T_instruction(yytext(), 8));
          }
        case 40: break;
        case 17: 
          { return (new T_turn(yytext(), 2));
          }
        case 41: break;
        case 10: 
          { return (new T_condition(yytext(), 5));
          }
        case 42: break;
        case 22: 
          { return (new T_condition(yytext(), 10));
          }
        case 43: break;
        case 5: 
          { return (new T_instruction(yytext(), 2));
          }
        case 44: break;
        case 24: 
          { return (new T_direction(yytext(), 3));
          }
        case 45: break;
        case 7: 
          { return (new T_condition(yytext(), 6));
          }
        case 46: break;
        case 1: 
          { return new ErrorFail();
          }
        case 47: break;
        case 19: 
          { return (new T_instruction(yytext(), 3));
          }
        case 48: break;
        case 25: 
          { return (new T_direction(yytext(), 4));
          }
        case 49: break;
        case 18: 
          { return (new T_condition(yytext(), 7));
          }
        case 50: break;
        case 20: 
          { return (new T_instruction(yytext(), 4));
          }
        case 51: break;
        case 2: 
          { return (new T_int(yytext()));
          }
        case 52: break;
        case 21: 
          { return (new T_condition(yytext(), 1));
          }
        case 53: break;
        case 23: 
          { return (new T_condition(yytext(), 8));
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
  
  public boolean getEndOf(){
	  return this.zzAtEOF;
  }


}
